function Screen.init 0
push constant 16384
pop static 0
push constant 0
not
pop static 1
push constant 0
return
function Screen.clearScreen 1
push constant 0
pop local 0
label Screen.clearScreen.WHILE.0
push local 0
push constant 8192
lt
not
if-goto Screen.clearScreen.WHILE.1
push constant 0
push static 0
push local 0
add
pop pointer 1
pop that 0
goto Screen.clearScreen.WHILE.0
label Screen.clearScreen.WHILE.1
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 1
push constant 0
return
function Screen.drawPixel 2
push static 0
push argument 1
push constant 32
call Math.multiply 2
add
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push argument 0
push constant 15
and
call Math.twoToThe 1
pop local 1
push static 1
not
if-goto Screen.drawPixel.IF.0
push local 0
push local 0
call Memory.peek 1
push local 1
or
call Memory.poke 2
pop temp 0
goto Screen.drawPixel.IF.1
label Screen.drawPixel.IF.0
push local 0
push local 0
call Memory.peek 1
push local 1
not
and
call Memory.poke 2
pop temp 0
label Screen.drawPixel.IF.1
push constant 0
return
function Screen.drawLine 6
push argument 2
push argument 0
sub
call Math.abs 1
pop local 0
push argument 3
push argument 1
sub
call Math.abs 1
pop local 1
push local 1
push constant 0
eq
not
if-goto Screen.drawLine.IF.2
push argument 0
push argument 2
push argument 1
call Screen.drawHLine 3
pop temp 0
push constant 0
return
goto Screen.drawLine.IF.3
label Screen.drawLine.IF.2
label Screen.drawLine.IF.3
push local 0
push constant 0
eq
not
if-goto Screen.drawLine.IF.4
push argument 0
push argument 1
push argument 3
call Screen.drawVLine 3
pop temp 0
push constant 0
return
goto Screen.drawLine.IF.5
label Screen.drawLine.IF.4
label Screen.drawLine.IF.5
push argument 0
push argument 2
lt
not
if-goto Screen.drawLine.IF.6
push constant 1
pop local 2
goto Screen.drawLine.IF.7
label Screen.drawLine.IF.6
push constant 1
neg
pop local 2
label Screen.drawLine.IF.7
push argument 1
push argument 3
lt
not
if-goto Screen.drawLine.IF.8
push constant 1
pop local 3
goto Screen.drawLine.IF.9
label Screen.drawLine.IF.8
push constant 1
neg
pop local 3
label Screen.drawLine.IF.9
push local 0
push local 1
sub
pop local 4
label Screen.drawLine.WHILE.2
push argument 0
push argument 2
eq
push argument 1
push argument 3
eq
and
not
not
if-goto Screen.drawLine.WHILE.3
push argument 0
push argument 1
call Screen.drawPixel 2
pop temp 0
push local 4
push local 4
add
pop local 5
push local 5
push local 1
neg
gt
not
if-goto Screen.drawLine.IF.10
push local 4
push local 1
sub
pop local 4
push argument 0
push local 2
add
pop argument 0
goto Screen.drawLine.IF.11
label Screen.drawLine.IF.10
label Screen.drawLine.IF.11
push local 5
push local 0
lt
not
if-goto Screen.drawLine.IF.12
push local 4
push local 0
add
pop local 4
push argument 1
push local 3
add
pop argument 1
goto Screen.drawLine.IF.13
label Screen.drawLine.IF.12
label Screen.drawLine.IF.13
push argument 0
push argument 1
call Screen.drawPixel 2
pop temp 0
goto Screen.drawLine.WHILE.2
label Screen.drawLine.WHILE.3
push constant 0
return
function Screen.drawHLine 1
push argument 0
push argument 1
gt
not
if-goto Screen.drawHLine.IF.14
push argument 0
pop local 0
push argument 1
pop argument 0
push local 0
pop argument 1
goto Screen.drawHLine.IF.15
label Screen.drawHLine.IF.14
label Screen.drawHLine.IF.15
label Screen.drawHLine.WHILE.4
push argument 1
push argument 0
lt
not
not
if-goto Screen.drawHLine.WHILE.5
push argument 0
push argument 2
call Screen.drawPixel 2
pop temp 0
push argument 0
push constant 1
add
pop argument 0
goto Screen.drawHLine.WHILE.4
label Screen.drawHLine.WHILE.5
push constant 0
return
function Screen.drawVLine 1
push argument 1
push argument 2
gt
not
if-goto Screen.drawVLine.IF.16
push argument 1
pop local 0
push argument 2
pop argument 1
push local 0
pop argument 2
goto Screen.drawVLine.IF.17
label Screen.drawVLine.IF.16
label Screen.drawVLine.IF.17
label Screen.drawVLine.WHILE.6
push argument 2
push argument 1
lt
not
not
if-goto Screen.drawVLine.WHILE.7
push argument 0
push argument 1
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 1
add
pop argument 1
goto Screen.drawVLine.WHILE.6
label Screen.drawVLine.WHILE.7
push constant 0
return
function Screen.drawRectangle 0
push argument 1
push argument 3
gt
not
if-goto Screen.drawRectangle.IF.18
push argument 1
push argument 3
pop argument 1
pop argument 3
goto Screen.drawRectangle.IF.19
label Screen.drawRectangle.IF.18
label Screen.drawRectangle.IF.19
label Screen.drawRectangle.WHILE.8
push argument 3
push argument 1
lt
not
not
if-goto Screen.drawRectangle.WHILE.9
push argument 0
push argument 2
push argument 1
call Screen.drawHLine 3
pop temp 0
push argument 1
push constant 1
add
pop argument 1
goto Screen.drawRectangle.WHILE.8
label Screen.drawRectangle.WHILE.9
push constant 0
return
function Screen.drawCircle 3
push argument 2
neg
pop local 1
push argument 2
push argument 2
call Math.multiply 2
pop local 2
label Screen.drawCircle.WHILE.10
push local 1
push argument 2
gt
not
not
if-goto Screen.drawCircle.WHILE.11
push local 2
push local 1
push local 1
call Math.multiply 2
sub
call Math.sqrt 1
pop local 0
push argument 0
push local 0
sub
push argument 0
push local 0
add
push argument 1
push local 1
add
call Screen.drawHLine 3
pop temp 0
push local 1
push constant 1
add
pop local 1
goto Screen.drawCircle.WHILE.10
label Screen.drawCircle.WHILE.11
push constant 0
return
