function Math.init 0
push constant 16
pop static 0
push static 0
call Array.new 1
pop static 1
push constant 1
push static 1
push constant 0
add
pop pointer 1
pop that 0
push constant 2
push static 1
push constant 1
add
pop pointer 1
pop that 0
push constant 4
push static 1
push constant 2
add
pop pointer 1
pop that 0
push constant 8
push static 1
push constant 3
add
pop pointer 1
pop that 0
push constant 16
push static 1
push constant 4
add
pop pointer 1
pop that 0
push constant 32
push static 1
push constant 5
add
pop pointer 1
pop that 0
push constant 64
push static 1
push constant 6
add
pop pointer 1
pop that 0
push constant 128
push static 1
push constant 7
add
pop pointer 1
pop that 0
push constant 256
push static 1
push constant 8
add
pop pointer 1
pop that 0
push constant 512
push static 1
push constant 9
add
pop pointer 1
pop that 0
push constant 1024
push static 1
push constant 10
add
pop pointer 1
pop that 0
push constant 2048
push static 1
push constant 11
add
pop pointer 1
pop that 0
push constant 4096
push static 1
push constant 12
add
pop pointer 1
pop that 0
push constant 8192
push static 1
push constant 13
add
pop pointer 1
pop that 0
push constant 16384
push static 1
push constant 14
add
pop pointer 1
pop that 0
push constant 16384
push constant 16384
add
push static 1
push constant 15
add
pop pointer 1
pop that 0
push constant 0
return
function Math.bit 0
push argument 0
push static 1
push argument 1
add
pop pointer 1
push that 0
and
push constant 0
eq
not
return
function Math.multiply 3
push constant 0
pop local 0
push argument 0
pop local 1
push constant 0
pop local 2
label Math.multiply.WHILE.0
push local 2
push static 0
lt
not
if-goto Math.multiply.WHILE.1
push argument 1
push local 2
call Math.bit 2
not
if-goto Math.multiply.IF.0
push local 0
push local 1
add
pop local 0
goto Math.multiply.IF.1
label Math.multiply.IF.0
label Math.multiply.IF.1
push local 1
push local 1
add
pop local 1
push local 2
push constant 1
add
pop local 2
goto Math.multiply.WHILE.0
label Math.multiply.WHILE.1
push local 0
return
function Math.divide 3
push argument 0
push constant 0
lt
push argument 1
and
push constant 0
gt
push argument 0
push constant 0
gt
push argument 1
and
push constant 0
lt
or
pop local 0
push argument 0
call Math.abs 1
pop argument 0
push argument 1
call Math.abs 1
pop argument 1
push argument 1
push argument 0
gt
not
if-goto Math.divide.IF.2
push constant 0
return
goto Math.divide.IF.3
label Math.divide.IF.2
label Math.divide.IF.3
push argument 1
push argument 1
add
push constant 0
lt
not
if-goto Math.divide.IF.4
push constant 0
pop local 1
goto Math.divide.IF.5
label Math.divide.IF.4
push argument 0
push argument 1
push argument 1
add
call Math.divide 2
pop local 1
label Math.divide.IF.5
push argument 0
push constant 2
push local 1
call Math.multiply 2
push argument 1
call Math.multiply 2
sub
push argument 1
lt
not
if-goto Math.divide.IF.6
push local 1
push local 1
add
pop local 2
goto Math.divide.IF.7
label Math.divide.IF.6
push local 1
push local 1
add
push constant 1
add
pop local 2
label Math.divide.IF.7
push local 0
not
if-goto Math.divide.IF.8
push local 2
neg
return
goto Math.divide.IF.9
label Math.divide.IF.8
push local 2
return
label Math.divide.IF.9
function Math.sqrt 4
push constant 0
pop local 0
push static 0
push constant 2
call Math.divide 2
push constant 1
sub
pop local 1
label Math.sqrt.WHILE.2
push local 1
push constant 0
lt
not
not
if-goto Math.sqrt.WHILE.3
push local 0
push static 1
push local 1
add
pop pointer 1
push that 0
add
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 3
push local 3
push argument 0
gt
not
push local 3
push constant 0
gt
and
not
if-goto Math.sqrt.IF.10
push local 2
pop local 0
goto Math.sqrt.IF.11
label Math.sqrt.IF.10
label Math.sqrt.IF.11
push local 1
push constant 1
sub
pop local 1
goto Math.sqrt.WHILE.2
label Math.sqrt.WHILE.3
push local 0
return
function Math.max 0
push argument 0
push argument 1
gt
not
if-goto Math.max.IF.12
push argument 0
return
goto Math.max.IF.13
label Math.max.IF.12
push argument 1
return
label Math.max.IF.13
function Math.min 0
push argument 0
push argument 1
lt
not
if-goto Math.min.IF.14
push argument 0
return
goto Math.min.IF.15
label Math.min.IF.14
push argument 1
return
label Math.min.IF.15
function Math.abs 0
push argument 0
push constant 0
gt
not
if-goto Math.abs.IF.16
push argument 0
return
goto Math.abs.IF.17
label Math.abs.IF.16
label Math.abs.IF.17
push argument 0
neg
return
