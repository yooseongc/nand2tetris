// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array freeList;
    static int heapBase, length, next;

    /** Initializes the class. */
    function void init() {
        // Heap Space: 2048 - 16383
        let heapBase = 2048;
        let length = 0;
        let next = 1;

        let freeList = heapBase;
        let freeList[length] = 14335;
        let freeList[next] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        var Array memory;
        let memory = address;
        return memory[0];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        var Array memory;
        let memory = address;
        let memory[0] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array seg, prevSeg, nextSeg;
        let seg = freeList;
        let prevSeg = 0;
        
        while (seg[length] < size) {
            let prevSeg = seg;
            let seg = seg[next];
            if (seg = null) {
                return -1
            }
        }

        let nextSeg = seg + 2 + size;
        let nextSeg[length] = seg[length] - size - 2;
        let nextSeg[next] = seg[next];
        let seg[length] = size;
        let seg[next] = null;

        if (prevSeg = 0) {
            let freeList = nextSeg;
        } else {
            let prevSeg[next] = nextSeg;
        }

        return seg + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array segment;
        let segment = o - 1;
        let segment[length] = o[-1]
        let segment[next] = freeList;
        let freeList = segemnt;
        return;
    }    
}
