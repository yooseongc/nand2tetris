// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array mem;
    static int ptrFreeListFirst;
    static int heapBase, heapLimit;

    /** Initializes the class. */
    function void init() {
        let mem = 0;
        // Heap Space: 2048 - 16383
        let heapBase = 2048;
        let heapLimit = 16384;

        let mem[heapBase] = heapLimit - heapBase;
        let mem[heapBase + 1] = 0;
        let ptrFreeListFirst = heapBase;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return mem[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let mem[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int ptrPrev, ptrCur, ptrBlockNew;

        let ptrCur = ptrFreeListFirst;

        while (true)
        {
            if (ptrCur = 0) {
                do Sys.error(6);
            }

            if (size < (mem[ptrCur] + 1)) {
                if ((mem[ptrCur] - size) > 1) {
                    let ptrBlockNew = ptrCur + size + 1;
                    let mem[ptrBlockNew] = mem[ptrCur] - size - 1;
                    let mem[ptrBlockNew + 1] = mem[ptrCur + 1];

                    let mem[ptrCur] = size;

                    if (ptrPrev = 0) {
                        let ptrFreeListFirst = ptrBlockNew;
                    } else {
                        let mem[ptrPrev + 1] = ptrBlockNew;
                    }
                } else {
                    if (ptrPrev = 0) {
                        let ptrFreeListFirst = mem[ptrCur + 1];
                    } else {
                        let mem[ptrPrev + 1] = mem[ptrCur + 1];
                    }
                }

                return ptrCur + 1;
            }

            let ptrPrev = ptrCur;
            let ptrCur = mem[ptrCur + 1];
        }

        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array object) {
        let mem[object] = ptrFreeListFirst;
        let ptrFreeListFirst = object - 1;
        return;
    }    
}
