// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array screen;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192) {
            let screen[i] = false;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, mask;

        let address = screen + (y * 32) + (x / 16);
        let mask = Math.twoToThe(x & 15);

        if (color) {
            do Memory.poke(address, Memory.peek(address) | mask);
        } else {
            do Memory.poke(address, Memory.peek(address) & (~mask));
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, sx, sy, err, err2;

        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);

        if (dy = 0) {
            do Screen.drawHLine(x1, x2, y1);
            return;
        }

        if (dx = 0) {
            do Screen.drawVLine(x1, y1, y2);
            return;
        }

        if (x1 < x2) {
            let sx = 1;
        } else {
            let sx = -1;
        }

        if (y1 < y2) {
            let sy = 1;
        } else {
            let sy = -1;
        }

        let err = dx - dy;
        while(~((x1 = x2) & (y1 = y2))) {
            do Screen.drawPixel(x1, y1);
            let err2 = err + err;
            if (err2 > -dy) {
                let err = err - dy;
                let x1 = x1 + sx;
            }

            if (err2 < dx) {
                let err = err + dx;
                let y1 = y1 + sy;
            }

            do Screen.drawPixel(x1, y1);
        }

        return;
    }

    function void drawHLine(int x1, int x2, int y) {
        var int temp;

        if (x1 > x2) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
        }

        while (~(x2 < x1)) {
            do Screen.drawPixel(x1, y);
            let x1 = x1 + 1;
        }

        return;
    }

    function void drawVLine(int x, int y1, int y2) {
        var int temp;

        if (y1 > y2) {
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        while (~(y2 < y1)) {
            do Screen.drawPixel(x, y1);
            let y1 = y1 + 1;
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        if (y1 > y2) {
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        
        while (~(y2 < y1)) {
            do Screen.drawHLine(x1, x2, y1);
            let y1 = y1 + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy, r2;
        
        let dy = -r;
        let r2 = r * r;

        while (~(dy > r)) {
            let dx = Math.sqrt(r2 - (dy * dy));
            do Screen.drawHLine(x - dx, x + dx, y + dy);
            let dy = dy + 1;
        }

        return;
    }
}
